import datetime
import json
import logging
import os
import re

import requests
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Handlers.GPTService import GPTService
from Services.FlowerService import FlowerService

class BouquetOrderStates(StatesGroup):
    waiting_for_bouquet_choice = State()  # –°—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –±—É–∫–µ—Ç–∞
    waiting_for_purchase_confirmation = State()
    waiting_for_custom_bouquet = State()  #

logger = logging.getLogger(__name__)

class FlowerCatalogHandler:
    def __init__(self):
        self.flower_service = FlowerService()
        self.gpt_service = GPTService()

    async def show_flower_catalog(self, message: types.Message, page: int = 1):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–∞—Ç–∞–ª–æ–≥ –∫–≤—ñ—Ç—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.
        """
        per_page = 5
        flowers_response = await self.flower_service.fetch_all_flowers(page, per_page)

        if not flowers_response:
            await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–∞—Ä–∞–∑—ñ —É –Ω–∞—Å –Ω–µ–º–∞—î –∫–≤—ñ—Ç—ñ–≤ —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. üå∏")
            return

        flowers = self.flower_service.flowers
        total_pages = self.flower_service.get_total_pages(per_page)

        text = "üåº –û—Å—å –∫–∞—Ç–∞–ª–æ–≥ –∫–≤—ñ—Ç—ñ–≤, —â–æ —É –Ω–∞—Å —î! üåªüåºüíõ\n–û–±–µ—Ä—ñ—Ç—å –∫–≤—ñ—Ç–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:"

        builder = InlineKeyboardBuilder()
        for flower in flowers:
            builder.row(InlineKeyboardButton(text=flower['name'], callback_data=f"flower_info_{flower['id']}"))

        if page > 1:
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"flowers_page_{page - 1}"))
        if page < total_pages:
            builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"flowers_page_{page + 1}"))

        await message.answer(text, reply_markup=builder.as_markup())



    async def check_flower_availability(self, flower_name: str, message: types.Message):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–≤—ñ—Ç–æ–∫ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ–∂–Ω—É –∑ –Ω–∏—Ö.
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —ñ–º–µ–Ω–∞ –∫–≤—ñ—Ç–æ–∫
        flower_names = await self.flower_service.fetch_flower_names()

        logger.info(flower_names)

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î –ø—Ä–æ –∫–≤—ñ—Ç–∫—É '{flower_name}'. "
            f"–í–∏–±–µ—Ä–∏ –≤—Å—ñ –∫–≤—ñ—Ç–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É: {', '.join(flower_names)}, —è–∫—ñ –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ —Ü–µ–π –∑–∞–ø–∏—Ç. "
            "–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–≤—ñ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. "
            "–Ø–∫—â–æ –∂–æ–¥–Ω–∞ –∫–≤—ñ—Ç–∫–∞ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –ø–æ–≤–µ—Ä–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫."
        )

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç—É –¥–æ GPT
        gpt_response = await self.gpt_service.send_to_gpt(prompt)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
        if gpt_response:
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT, –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äì —Ü–µ —Ä—è–¥–æ–∫ —ñ–∑ –Ω–∞–∑–≤–∞–º–∏ –∫–≤—ñ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É
            flower_list = gpt_response.split(", ") if gpt_response else []

            if flower_list:
                # –Ø–∫—â–æ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–≤—ñ—Ç–∫–∏, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
                await message.answer(f"üåº –¢–∞–∫, —É –Ω–∞—Å —î –∫–≤—ñ—Ç–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ! üåº\n"
                                     f"–û—Å—å —Å–ø–∏—Å–æ–∫ –∫–≤—ñ—Ç—ñ–≤, —â–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –≤–∞—à –∑–∞–ø–∏—Ç: üåªüåºüíõ")

                # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—è –ø–æ –∫–æ–∂–Ω—ñ–π –∫–≤—ñ—Ç—Ü—ñ –∑ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
                for flower in flower_list:
                    flower_data = await self.flower_service.get_flower_by_name(flower)
                    relative_path = f"../back/media/flowers/{flower_data['photo']}"
                    photo_path = os.path.abspath(relative_path)
                    photo = FSInputFile(photo_path)

                    if flower_data:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∫—É
                        await message.answer_photo(
                            photo,
                            caption=f"{flower_data['name']} - {flower_data['price']} –≥—Ä–Ω üåª\n"
                                    f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {flower_data['quantity']} üì¶\n"
                                    f"–û–ø–∏—Å: {flower_data['description']} üìú"
                        )
                    else:
                        await message.answer(f"–ö–≤—ñ—Ç–∫–∞ '{flower}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ.")
            else:
                # –Ø–∫—â–æ –∫–≤—ñ—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await message.answer(f"üòî –ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∂–æ–¥–Ω–∏—Ö –∫–≤—ñ—Ç–æ–∫ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{flower_name}'.\n"
                                     "üåº –ê–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —ñ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—à—ñ —á—É–¥–æ–≤—ñ –∫–≤—ñ—Ç–∏ üíêüíõ!")
        else:
            await message.answer("–ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def show_flower_details(self, flower_id: int, callback_query: types.CallbackQuery):
        """
        –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∫—É.
        """
        flower = await self.flower_service.get_flower_by_id(flower_id)
        if flower:
            relative_path = f"../back/media/flowers/{flower['photo']}"
            photo_path = os.path.abspath(relative_path)
            photo = FSInputFile(photo_path)

            await callback_query.message.answer_photo(
                photo,
                caption=f"{flower['name']} - {flower['price']} –≥—Ä–Ω üåπ\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {flower['quantity']} üì¶\n–û–ø–∏—Å: {flower['description']} üìú"
            )
        else:
            await callback_query.message.answer("–ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –º–∞—î–º–æ —Ç–∞–∫–æ—ó –∫–≤—ñ—Ç–∫–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. üå∏")

    async def paginate_flowers(self, callback_query: types.CallbackQuery, state):
        """
        –û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É –∫–∞—Ç–∞–ª–æ–∑—ñ.
        """
        page = int(callback_query.data.split("_")[-1])
        await callback_query.message.delete()
        await self.show_flower_catalog(callback_query.message, page)

    async def flower_info_handler(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∫—É.
        """
        flower_id = int(callback_query.data.split("_")[-1])
        await self.show_flower_details(flower_id, callback_query)

    async def suggest_bouquet_options(self, message: types.Message, state: FSMContext):
        """
        –ü—Ä–æ–ø–æ–Ω—É—î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –±—É–∫–µ—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É.
        """
        available_flowers = await self.flower_service.fetch_flower_names()

        if not available_flowers:
            await message.answer("–ù–∞—Ä–∞–∑—ñ —É –Ω–∞—Å –Ω–µ–º–∞—î –∫–≤—ñ—Ç—ñ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è –±—É–∫–µ—Ç–∞. –í–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ. üå∏")
            return

        prompt = (
            f"–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤: {', '.join(available_flowers)}. "
            "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±—É–∫–µ—Ç—ñ–≤, –≤–∫–∞–∑—É—é—á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤—ñ—Ç–æ–∫ –∫–æ–∂–Ω–æ–≥–æ –≤–∏–¥—É. "
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ë—É–∫–µ—Ç 1: 3 —Ç—Ä–æ—è–Ω–¥–∏, 2 —Ä–æ–º–∞—à–∫–∏, 1 –ª—ñ–ª—ñ—è."
            f"–£–Ω–∏–∫–∞–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è GPT, —Ç–æ–±—Ç–æ –Ω–µ —Ä–æ–±–∏ —Å–ø–∏—Å–∫–∏ –∑ ** —ñ –¥–æ–¥–∞–π –∫—ñ–ª—å–∫–∞ –µ–º–æ–¥–∂—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó."

        )
        logger.info(prompt)

        gpt_response = await self.gpt_service.send_to_gpt(prompt)

        if gpt_response:
            await message.answer(f"–û—Å—å –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±—É–∫–µ—Ç—ñ–≤, —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:\n\n{gpt_response} üíê")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —É FSM
            await state.update_data(bouquet_options=gpt_response)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É
            await state.set_state(BouquetOrderStates.waiting_for_bouquet_choice)
        else:
            await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –±—É–∫–µ—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    import json

    async def handle_bouquet_choice(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –±—É–∫–µ—Ç–∞ —ñ –∑–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–æ–º –∑ –≤–∞—Ä—Ç—ñ—Å—Ç—é.
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —ñ–∑ —Å—Ç–∞–Ω—É
        user_data = await state.get_data()
        bouquet_options = user_data.get("bouquet_options")

        chosen_bouquet = message.text.strip()

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∏–π –±—É–∫–µ—Ç –≤–∏–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        prompt = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –≤–∞—Ä—ñ–∞–Ω—Ç –±—É–∫–µ—Ç–∞: '{chosen_bouquet}'. "
            "–Ø–∫–∏–π –±—É–∫–µ—Ç –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂–∏–π –Ω–∞ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞? "
            f"–û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏: {bouquet_options}. –ü–æ–≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤—É –≤–∏–±—Ä–∞–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞."
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT
        gpt_response = await self.gpt_service.send_to_gpt(prompt)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ GPT –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        if gpt_response:
            chosen_bouquet = gpt_response.strip()
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±—É–∫–µ—Ç—ñ–≤.")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await state.update_data(chosen_bouquet=chosen_bouquet)
        pattern = r'"–Ω–∞–∑–≤–∞":\s*"([^"]+)",\s*"–∫—ñ–ª—å–∫—ñ—Å—Ç—å":\s*(\d+)'

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–≤—ñ—Ç—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞
        flowers_prompt = (
            f"–ù–∞–∑–≤–∞ –±—É–∫–µ—Ç–∞: {chosen_bouquet}. –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –∫–≤—ñ—Ç—ñ–≤ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ—ó –∫–≤—ñ—Ç–∫–∏ –≤ —Ü—å–æ–º—É –±—É–∫–µ—Ç—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON. "
            f"–û–±–æ–≤'—è–∑–∫–æ–≤–æ!–ü–µ—Ä—à–µ —Å–ª–æ–≤–æ –∑ –≤–µ–ª–∏–∫–æ—ó –±—É–∫–≤–∏, –¥—Ä—É–≥–µ –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ß–µ—Ä–≤–æ–Ω–∞ —Ç—Ä–æ—è–Ω–¥–∞"
            f"–ù–∞–∑–≤–∏ –∫–≤—ñ—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞–π –≤ –æ–¥–Ω–∏–Ω—ñ. –Ü —è–∫—â–æ –≤ –Ω–∞–∑–≤—ñ —î –∫–æ–ª—ñ—Ä –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –≤ –Ω–∞–∑–≤—ñ.–û–±–æ–≤'—è–∑–∫–æ–≤–æ —Ç—Ä–µ–±–∞ —â–æ–± –≤–æ–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–∏–ª–æ—Å—å —Ç–∞–∫–∏–º –≤–∏—Ä–∞–∑–æ–º {pattern}"
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∫–ª–∞–¥ –±—É–∫–µ—Ç–∞
        bouquet_flowers_response = await self.gpt_service.send_to_gpt(flowers_prompt)

        # –õ–æ–≥ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        logger.info(f"Raw response from GPT: '{bouquet_flowers_response}'")

        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –∫–≤—ñ—Ç—ñ–≤ —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        matches = re.findall(pattern, bouquet_flowers_response)

        if not matches:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–≤—ñ—Ç—ñ–≤
        bouquet_flowers = {name: int(quantity) for name, quantity in matches}

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫–ª–∞–¥ –±—É–∫–µ—Ç–∞ –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(bouquet_flowers=bouquet_flowers)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –±—É–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ FlowerService
        flower_service = FlowerService()
        price_response = await flower_service.calculate_flower_price(bouquet_flowers)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
        total_price = price_response.get('total_price')
        if not total_price:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
        bouquet_details = ', '.join([f"{flower}: {quantity}" for flower, quantity in bouquet_flowers.items()])
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {bouquet_details}. –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_price} –≥—Ä–Ω. "
                             f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Ü–µ–π –±—É–∫–µ—Ç? (—Ç–∞–∫/–Ω—ñ) üåπ")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
        await state.set_state(BouquetOrderStates.waiting_for_purchase_confirmation)

    # –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
    async def get_weather(self):
        api_key = ""
        location = "Kyiv"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}&lang=ua&units=metric"
        response = requests.get(url)

        if response.status_code == 200:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É—Å–ø—ñ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É
            weather_data = response.json()
            if "weather" in weather_data:
                logger.info(f'Weather API response: {weather_data}')
                return weather_data
            else:
                logger.error(f'Weather data does not contain "weather" key: {weather_data}')
                return None
        else:
            logger.error(f'Error fetching weather data: {response.status_code}, {response.text}')
            return None

    # –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è confirm_purchase –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–≥–æ–¥–∏
    async def confirm_purchase(self, message: types.Message, state: FSMContext):
        user_response = message.text.lower()

        if user_response == "—Ç–∞–∫":
            user_data = await state.get_data()
            chosen_bouquet = user_data.get("chosen_bouquet")
            bouquet_flowers = user_data.get("bouquet_flowers")

            # –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏
            weather_data = await self.get_weather()
            logger.info(weather_data)
            if weather_data and "weather" in weather_data:
                current_weather = weather_data["weather"][0]["description"]

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤
                if "clear" in current_weather or "clouds" in current_weather:
                    delivery_cost = 50  # –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –≥–∞—Ä–Ω—ñ–π –ø–æ–≥–æ–¥—ñ
                    delivery_time = datetime.datetime.now() + datetime.timedelta(hours=1)  # –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É
                else:
                    delivery_cost = 100  # –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –ø–æ–≥–∞–Ω—ñ–π –ø–æ–≥–æ–¥—ñ
                    delivery_time = datetime.datetime.now() + datetime.timedelta(hours=1.5)  # –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 1.5 –≥–æ–¥–∏–Ω–∏
            else:
                # –Ø–∫—â–æ –ø–æ–≥–æ–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                delivery_cost = 70  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_time = datetime.datetime.now() + datetime.timedelta(hours=1.25)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
            flower_service = FlowerService()
            price_response = await flower_service.calculate_flower_price(bouquet_flowers)
            total_price = price_response.get('total_price', 0)
            total_cost = total_price + delivery_cost

            bouquet_details = ', '.join([f"{flower}: {quantity}" for flower, quantity in bouquet_flowers.items()])
            delivery_time_str = delivery_time.strftime("%H:%M")

            await message.answer(
                f"–í–∏ –æ–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {bouquet_details}. –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_price} –≥—Ä–Ω. "
                f"–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost} –≥—Ä–Ω. –ü–æ–≥–æ–¥–∞: {weather_data['weather'][0]['description']} \n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_cost} –≥—Ä–Ω.\n"
                f"–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time_str}.\n"
                f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Ü–µ–π –±—É–∫–µ—Ç? (—Ç–∞–∫/–Ω—ñ) üåπ"
            )

            await state.set_state(BouquetOrderStates.waiting_for_purchase_confirmation)

        elif user_response == "–Ω—ñ":
            await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await state.clear()
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –ª–∏—à–µ '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")

    # –•–µ–Ω–¥–ª–µ—Ä, —è–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    async def custom_bouquet_creation(self, message: types.Message, state: FSMContext):
        """
        –ü—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤ –¥–ª—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –±—É–∫–µ—Ç–∞.
        """
        available_flowers = await self.flower_service.fetch_flower_names()

        if not available_flowers:
            await message.answer("–ù–∞—Ä–∞–∑—ñ —É –Ω–∞—Å –Ω–µ–º–∞—î –∫–≤—ñ—Ç—ñ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è –±—É–∫–µ—Ç–∞. –í–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ. üå∏")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –∫–≤—ñ—Ç—ñ–≤
        flowers_list = 'üåπ ' + '\nüå∏ '.join(available_flowers)  # –î–æ–¥–∞—î–º–æ —Å–º–∞–π–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é –∫–≤—ñ—Ç–∫–æ—é
        prompt_text = (
            f"–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤:\n\n{flowers_list} üåº\n\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å, —è–∫—ñ –∫–≤—ñ—Ç–∏ —Ç–∞ –≤ —è–∫—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–≤–æ–≥–æ –±—É–∫–µ—Ç–∞.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '3 üåπ —Ç—Ä–æ—è–Ω–¥–∏, 2 üå∏ —Ä–æ–º–∞—à–∫–∏, 1 üåº –ª—ñ–ª—ñ—è'. üíê"
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É
        await message.answer(prompt_text)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–≤—ñ—Ç—ñ–≤
        await state.set_state(BouquetOrderStates.waiting_for_custom_bouquet)

    async def handle_custom_bouquet_choice(self, message: types.Message, state: FSMContext):
        """
        –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞ —ñ –∑–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏.
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–±—ñ—Ä –∫–≤—ñ—Ç—ñ–≤)
        chosen_bouquet = message.text.strip()

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ —Ç–∏–ø—É –∫–≤—ñ—Ç—ñ–≤
        pattern = r'"–Ω–∞–∑–≤–∞":\s*"([^"]+)",\s*"–∫—ñ–ª—å–∫—ñ—Å—Ç—å":\s*(\d+)' # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–∑–≤–∏ –∫–≤—ñ—Ç–æ–∫
        prompt = (
            f"–ù–∞–∑–≤–∞ –±—É–∫–µ—Ç–∞: {chosen_bouquet}. –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –∫–≤—ñ—Ç—ñ–≤ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ—ó –∫–≤—ñ—Ç–∫–∏ –≤ —Ü—å–æ–º—É –±—É–∫–µ—Ç—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON. "
            f"–û–±–æ–≤'—è–∑–∫–æ–≤–æ!–ü–µ—Ä—à–µ —Å–ª–æ–≤–æ –∑ –≤–µ–ª–∏–∫–æ—ó –±—É–∫–≤–∏, –¥—Ä—É–≥–µ –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ß–µ—Ä–≤–æ–Ω–∞ —Ç—Ä–æ—è–Ω–¥–∞"
            f"–ù–∞–∑–≤–∏ –∫–≤—ñ—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞–π –≤ –æ–¥–Ω–∏–Ω—ñ. –Ü —è–∫—â–æ –≤ –Ω–∞–∑–≤—ñ —î –∫–æ–ª—ñ—Ä –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –≤ –Ω–∞–∑–≤—ñ.–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –©–æ–± –≤–æ–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–∏–ª–æ—Å—å —Ç–∞–∫–∏–º –≤–∏—Ä–∞–∑–æ–º {pattern}"
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT
        gpt_response = await self.gpt_service.send_to_gpt(prompt)

        # –õ–æ–≥ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT
        logger.info(f"Raw response from GPT: '{gpt_response}'")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–≤—ñ—Ç–∏ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        matches = re.findall(pattern, gpt_response)

        if not matches:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–≤—ñ—Ç—ñ–≤
        bouquet_flowers = {name: int(quantity) for name, quantity in matches}
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫–ª–∞–¥ –±—É–∫–µ—Ç–∞ –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(bouquet_flowers=bouquet_flowers)

        flower_service = FlowerService()
        price_response = await flower_service.calculate_flower_price(bouquet_flowers)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
        total_price = price_response.get('total_price')
        if not total_price:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
        bouquet_details = ', '.join([f"{flower}: {quantity}" for flower, quantity in bouquet_flowers.items()])

        # –í–∏–≤–æ–¥–∏–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
        await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –±—É–∫–µ—Ç: {bouquet_details}. –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_price} –≥—Ä–Ω. "
                             f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Ü–µ–π –±—É–∫–µ—Ç? (—Ç–∞–∫/–Ω—ñ) üåπ")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
        await state.set_state(BouquetOrderStates.waiting_for_purchase_confirmation)