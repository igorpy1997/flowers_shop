import logging
from openai import OpenAI  # Імпорт OpenAI клієнта

logger = logging.getLogger(__name__)

class GPTService:
    def __init__(self):
        self.client = OpenAI(api_key="")  # Замініть на ваш API ключ

    async def gpt_classify_intent(self, text: str, stage: str) -> str:
        """
        Відправляє запит до GPT моделі для класифікації тексту повідомлення.
        """
        prompt = (
            f"Ви продовжуєте розмову на стадії: {stage}. "
            f"Класифікуйте наступне повідомлення в одну з цих категорій у строгому форматі JSON:\n"
            f'{{"classification": <номер_категорії>, "additional_info": "<додаткова_інформація>"}}\n'
            f"Якщо користувач запитує, чи доступна конкретна квітка, включіть назву квітки в 'additional_info'. "
            f"Якщо немає конкретної додаткової інформації, залиште 'additional_info' пустим.\n\n"
            f"Категорії:\n"
            f"1) Привітання\n"
            f"2) Загальне питання\n"
            f"3) Шукає допомогу/консультацію\n"
            f"4) Конкретний запит\n"
            f"5) Оформлення замовлення\n"
            f"6) Запит щодо доставки\n"
            f"7) Підтримка після покупки\n"
            f"8) Користувач запитує про наявність конкретної квітки. Назва квітки повинна бути присутня в запиті.\n"
            f"9) Запит на асортимент квітів. Включає питання на кшталт 'Що у вас є?' або загальні запити про доступні квіти.\n"
            f"10) Інше\n"
            f"11) Користувач демонструє намір купити квіти в загальному сенсі. Його намір ще не остаточний.\n\n"
            f"12) Намір зібрати букет. Будь-яке згадування букета без конретики\n"
            f"13) Користувач запитує допомогу в підборі букету. Коли користувач запитує які ми можемо букети йому підібрати. особливо, якщо {stage} це bouqet_processing\n"
            f"14) Користувач описує, який букет йому потрібен. Якщо користувач перелічує квіти букету.\n\n"
            f"Повідомлення: {text}\n"
            f"Відповідайте лише у форматі JSON."
        )

        try:
            response = self.client.chat.completions.with_raw_response.create(
                model="gpt-4o-mini",
                messages=[{
                    "role": "user",
                    "content": prompt,
                }]
            )
            logger.info(response.parse().choices[0].message.content)
            return response.parse().choices[0].message.content

        except Exception as e:
            logger.error(f"Error while classifying message: {e}")
            return "10"  # Інші випадки

    async def gpt_generate_reply(self, text: str, classification: str, stage: str) -> str:
        """
        Генерує відповідь від імені магазину "Квітка" на основі класифікації GPT.
        Відповідь має бути українською мовою без форматування в стилі GPT і з використанням емоджі.
        """
        if classification == "1":  # Привітання, тільки на початку діалогу
            prompt = (
                f"Ти повинен привітатися з користувачем від імені магазина квітів 'Квітка'. "
                f"Згенеруй тепле та дружнє привітання українською мовою, головне, почни з фраз привітання, по типу добрий день, не використовуючи спеціального форматування або списків."
                f" Додай кілька емоджі, щоб зробити відповідь більш приємною."
            )
        elif classification == "2":  # Загальне питання
            prompt = (
                f"Користувач задає загальне питання. Відповідай українською мовою як представник магазину квітів 'Квітка', надаючи корисну інформацію. "
                f"Уникай форматування в стилі GPT (без жирних текстів або списків) і додай кілька емоджі."
            )
        elif classification == "3":  # Шукає допомогу/консультацію
            prompt = (
                f"Користувач шукає допомогу або консультацію. Запропонуй показати наявний асортимент квітів магазину 'Квітка' або попроси більше деталей, відповідаючи українською мовою."
                f" Додай кілька емоджі для покращення досвіду користувача."
            )
        elif classification == "4":  # Конкретний запит
            prompt = (
                f"Користувач знає, що саме він хоче. Відповідай українською мовою як представник магазину квітів 'Квітка', перевіряючи наявність запитуваних квітів."
                f" Не використовуй форматування GPT, і додай емоджі, щоб відповідь виглядала дружньо."
            )
        elif classification == "5":  # Оформлення замовлення
            prompt = (
                f"Користувач хоче зробити замовлення. Проведи його через процес замовлення квітів з магазину 'Квітка', використовуючи українську мову. "
                f"Уникай форматування GPT, і додай кілька емоджі для покращення взаємодії."
            )
        elif classification == "6":  # Запит щодо доставки
            prompt = (
                f"Користувач цікавиться доставкою. Відповідай українською мовою як представник магазину 'Квітка', надаючи інформацію про доставку. "
                f"Додай кілька емоджі, щоб зробити відповідь більш приємною."
            )
        elif classification == "8":  # Запит щодо конкретної квітки
            prompt = (
                f"Користувач цікавиться наявністю конкретної квітки. Запропонуй перевірити наявність, "
                f"уточнивши, яка саме квітка потрібна, українською мовою. "
                f"Не забудь додати кілька емоджі."
            )
        elif classification == "11":  # Намір купити квіти в загальному сенсі
            prompt = (
                f"Користувач демонструє намір купити квіти, але його намір ще не остаточний. "
                f"Запропонуй показати асортимент квітів або допоможи з вибором, відповідаючи українською мовою. Але не вигадуй варіанти квітів, бо вони повинні бути взяти з бази"
                f"Додай кілька емоджі, щоб покращити взаємодію."
            )

        elif classification == "12":  # Намір зібрати букет
            prompt = (
                f"Користувач хоче зібрати букет. Скажи, що у нього є два варіанти: або самому описати букет, який йому потрібен або попросити підібрати варіанти букета, відповідаючи українською мовою, та додай кілька емоджі."
                f"Уникай форматування GPT, тобто не роби списки з ** і додай кілька емоджі для покращення взаємодії."

            )

        else:  # Інші випадки
            prompt = (
                f"Користувач задає питання, яке не входить у типові категорії. Відповідай українською мовою ввічливо та допоможи як представник магазину квітів 'Квітка'. "
                f"Додай емоджі, щоб покращити взаємодію."
            )

        try:
            response = self.client.chat.completions.with_raw_response.create(
                model="gpt-4o-mini",
                messages=[{
                    "role": "user",
                    "content": prompt,
                }]
            )

            return response.parse().choices[0].message.content

        except Exception as e:
            logger.error(f"Error while generating reply: {e}")
            return "Вибачте, щось пішло не так. Спробуйте пізніше."

    async def send_to_gpt(self, prompt: str) -> str:
        """
        Відправляє промпт до GPT моделі для отримання відповіді про наявність квітки.
        """
        try:
            response = self.client.chat.completions.with_raw_response.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}]
            )

            # Розбираємо відповідь для отримання детальної інформації
            content = response.parse().choices[0].message.content
            logger.info(f"GPT response: {content}")

            return content  # Повертаємо не розпарсений контент для подальшої обробки

        except Exception as e:
            logger.error(f"Error while sending prompt to GPT: {e}")
            return None


